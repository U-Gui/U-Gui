<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 注解扫描包 -->
	
	<context:component-scan base-package="cn.edu.neu" >      
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />    
	</context:component-scan> 
	

	<!-- 开启注解 -->
	<mvc:annotation-driven />
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 可以直接相应转发的页面, 而无需再经过 Handler 的方法. -->
	<mvc:view-controller path="/" view-name="index"/>
	<mvc:view-controller path="/user/regFormModal" view-name="/common/regFormModal"/>
	<mvc:view-controller path="/admin" view-name="adminLogin"/>
	<mvc:view-controller path="/admin/home" view-name="/admin/home"/>
	<mvc:view-controller path="/execute_result" view-name="/common/execute_result"/>
	<mvc:view-controller path="/login" view-name="/common/login"/>
	<mvc:view-controller path="/usercenter/index" view-name="/usercenter/index"/>
	
	
	<!--
		配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd
	-->
	
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/html/**" location="/html/" />

	<!--  
		default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler,
		它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的 
		Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理

		一般 WEB 应用服务器默认的 Servlet 的名称都是 default.
		若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定
		
	-->
	<mvc:default-servlet-handler/>

	<mvc:interceptors>
	    <!-- 配置拦截器(不)作用的路径 -->  
		<mvc:interceptor>
		    <mvc:mapping path="/**"/> 
		    <mvc:exclude-mapping path="/"/>
		    <mvc:exclude-mapping path="/index"/>
		    <mvc:exclude-mapping path="/delete"/>
		    <mvc:exclude-mapping path="/admin"/>
			<!-- <mvc:exclude-mapping path="/user/login"/>
			<mvc:exclude-mapping path="/user/logout"/>
			<mvc:exclude-mapping path="/user/reg"/>
			<mvc:exclude-mapping path="/user/checkUserName"/> -->
			<mvc:exclude-mapping path="/execute_result"/>
			<mvc:exclude-mapping path="/login"/>
			<mvc:exclude-mapping path="/user/**"/>
			<mvc:exclude-mapping path="/cate/**"/>
			<mvc:exclude-mapping path="/goods/**"/>
 			<mvc:exclude-mapping path="/js/**"/>
			<mvc:exclude-mapping path="/css/**"/>  
         	<mvc:exclude-mapping path="/images/**"/>
         	<mvc:exclude-mapping path="/html/**"/>
         	
         	 
         	<bean class="cn.edu.neu.core.common.LoginInterceptor"></bean>	
		</mvc:interceptor>
		
		<!-- 配置自定义的拦截器 
		<mvc:interceptor>
		    <mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/login"/>
			<mvc:exclude-mapping path="/logout"/>
			<mvc:exclude-mapping path="/js/**"/>
			<mvc:exclude-mapping path="/css/**"/>  
         	<mvc:exclude-mapping path="/images/**"/> 
			<bean class="neo.core.common.ExceptionInterceptor"></bean>
		</mvc:interceptor>-->	
		
		<!-- 配置 LocaleChanceInterceptor -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
	</mvc:interceptors>
	
	<!-- 配置上传文件解析器 -->
	<bean id="multipartResolver" 
	    class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <property name="defaultEncoding" value="UTF-8"/>
	   
	</bean>
</beans>
